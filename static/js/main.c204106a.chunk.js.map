{"version":3,"sources":["features/employees/employeesSlice.js","app/utils.js","features/employees/EmployeesPart.js","app/sessionStorage.js","features/employees/BirthdayPart.js","features/employees/Employees.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["employeesSlice","createSlice","name","initialState","data","reducers","actionData","state","action","payload","actions","selectData","employees","alphaBet","months","EmployeesPart","dispatch","useDispatch","workers","useSelector","table","map","letter","find","worker","lastName","substring","className","htmlFor","firstName","type","defaultChecked","check","id","onChange","updateWorkers","toggleCheckbox","useEffect","persistedState","serializedState","sessionStorage","getItem","JSON","parse","error","loadState","a","fetch","request","json","response","forEach","Object","assign","console","log","BirthdayPart","useState","isSelect","setIsSelect","formatDate","date","dobWorker","Date","dayMonth","toLocaleDateString","day","month","year","getFullYear","index","Number","dob","filter","Employees","App","store","configureStore","reducer","employeesReducer","subscribe","throttle","stringify","setItem","saveState","getState","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c204106a.chunk.js","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nexport const employeesSlice = createSlice({\r\n  name: \"employees\",\r\n  initialState: {\r\n    data: [],\r\n  },\r\n  reducers: {\r\n    actionData: (state, action) => {\r\n      state.data = action.payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { actionData } = employeesSlice.actions;\r\n\r\nexport const selectData = (state) => state.employees.data;\r\n\r\nexport default employeesSlice.reducer;\r\n","export const mainUrl =\r\n  \"https://yalantis-react-school-api.yalantis.com/api/task0/users\";\r\n\r\nexport const alphaBet = [\r\n  \"A\",\r\n  \"B\",\r\n  \"C\",\r\n  \"D\",\r\n  \"E\",\r\n  \"F\",\r\n  \"G\",\r\n  \"H\",\r\n  \"I\",\r\n  \"J\",\r\n  \"K\",\r\n  \"L\",\r\n  \"M\",\r\n  \"N\",\r\n  \"O\",\r\n  \"P\",\r\n  \"Q\",\r\n  \"R\",\r\n  \"S\",\r\n  \"T\",\r\n  \"U\",\r\n  \"V\",\r\n  \"W\",\r\n  \"X\",\r\n  \"Y\",\r\n  \"Z\",\r\n];\r\n\r\nexport const months = [\r\n  \"January\",\r\n  \"February\",\r\n  \"March\",\r\n  \"April\",\r\n  \"May\",\r\n  \"June\",\r\n  \"July\",\r\n  \"August\",\r\n  \"September\",\r\n  \"October\",\r\n  \"November\",\r\n  \"December\",\r\n];\r\n","import { useEffect } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { actionData, selectData } from \"./employeesSlice\";\r\nimport { mainUrl, alphaBet } from \"../../app/utils\";\r\n\r\nimport { loadState } from \"../../app/sessionStorage\";\r\n\r\nexport const EmployeesPart = () => {\r\n  const dispatch = useDispatch();\r\n  const workers = useSelector(selectData);\r\n\r\n  const toggleCheckbox = (id) => {\r\n    const updateWorkers = workers.map((worker) => {\r\n      if (worker.id === id) {\r\n        return { ...worker, check: !worker.check };\r\n      } else {\r\n        return worker;\r\n      }\r\n    });\r\n    dispatch(actionData(updateWorkers));\r\n  };\r\n\r\n  const table = alphaBet.map((letter) => {\r\n    if (workers.find((worker) => worker.lastName.substring(0, 1) === letter)) {\r\n      return (\r\n        <div className=\"card\" key={letter}>\r\n          <div className=\"title-card\">\r\n            <p>\r\n              <strong>{letter}</strong>\r\n            </p>\r\n          </div>\r\n\r\n          {workers.map((worker) => {\r\n            if (worker.lastName.substring(0, 1) === letter) {\r\n              return (\r\n                <div key={worker.id} className=\"card-content\">\r\n                  <label htmlFor={`${worker.lastName} ${worker.firstName}`}>\r\n                    {worker.lastName} {worker.firstName}\r\n                  </label>\r\n                  <input\r\n                    type=\"checkbox\"\r\n                    defaultChecked={worker.check}\r\n                    id={worker.id}\r\n                    name={`${worker.lastName} ${worker.firstName}`}\r\n                    onChange={() => toggleCheckbox(worker.id)}\r\n                  />\r\n                </div>\r\n              );\r\n            }\r\n            return null;\r\n          })}\r\n        </div>\r\n      );\r\n    } else {\r\n      return (\r\n        <div className=\"card\" key={letter}>\r\n          <div className=\"title-card\">\r\n            <p>\r\n              <strong>{letter}</strong>\r\n            </p>\r\n          </div>\r\n          <div className=\"card-content\">\r\n            <strong>- - -</strong>\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n  });\r\n\r\n  useEffect(() => {\r\n    const persistedState = loadState();\r\n    if (persistedState) {\r\n      dispatch(actionData(persistedState.employees.data));\r\n    } else {\r\n      const fetchData = () => async (dispatch) => {\r\n        try {\r\n          const request = await fetch(mainUrl);\r\n          const response = await request.json();\r\n          response.forEach((worker) => Object.assign(worker, { check: false }));\r\n          dispatch(actionData(response));\r\n        } catch (error) {\r\n          console.log(error);\r\n        }\r\n      };\r\n      dispatch(fetchData());\r\n    }\r\n  }, [dispatch]);\r\n\r\n  return (\r\n    <section>\r\n      <div className=\"heading\">\r\n        <h2>Employees</h2>\r\n      </div>\r\n      <div className=\"wrapper-empPage\">{table}</div>\r\n    </section>\r\n  );\r\n};\r\n","export const loadState = () => {\r\n  try {\r\n    const serializedState = sessionStorage.getItem(\"state\");\r\n    if (serializedState === null) {\r\n      return undefined;\r\n    }\r\n    return JSON.parse(serializedState);\r\n  } catch (error) {\r\n    return undefined;\r\n  }\r\n};\r\n\r\nexport const saveState = (state) => {\r\n  try {\r\n    const serializedState = JSON.stringify(state);\r\n    sessionStorage.setItem(\"state\", serializedState);\r\n  } catch {}\r\n};\r\n","import { useEffect, useState } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { selectData } from \"./employeesSlice\";\r\nimport { months } from \"../../app/utils\";\r\n\r\nexport const BirthdayPart = () => {\r\n  const workers = useSelector(selectData);\r\n  const [isSelect, setIsSelect] = useState(false);\r\n\r\n  const formatDate = (date) => {\r\n    const dobWorker = new Date(date);\r\n    const options = { day: \"numeric\", month: \"long\" };\r\n    const dayMonth = dobWorker.toLocaleDateString(\"en-GB\", options);\r\n    const year = dobWorker.getFullYear();\r\n    return `${dayMonth}, ${year} year`;\r\n  };\r\n\r\n  const table = months.map((month, index) => {\r\n    if (\r\n      workers.find(\r\n        (worker) =>\r\n          month === months[Number(worker.dob.substring(5, 7)) - 1] &&\r\n          worker.check\r\n      )\r\n    ) {\r\n      return (\r\n        <div className=\"dob-div\" key={index}>\r\n          <p>\r\n            <span className=\"dob-title\">{month}</span>\r\n          </p>\r\n          <div className=\"dob-content\">\r\n            {workers\r\n              .filter((worker) => worker.check)\r\n              .map((worker) => {\r\n                if (month === months[Number(worker.dob.substring(5, 7)) - 1]) {\r\n                  return (\r\n                    <p key={worker.id}>\r\n                      {worker.lastName} {worker.firstName} -{\" \"}\r\n                      {formatDate(worker.dob)}\r\n                    </p>\r\n                  );\r\n                }\r\n                return null;\r\n              })}\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n    return null;\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (workers.find((worker) => worker.check)) {\r\n      setIsSelect(true);\r\n    } else {\r\n      setIsSelect(false);\r\n    }\r\n  }, [workers]);\r\n\r\n  return (\r\n    <section>\r\n      <div className=\"heading heading-dob\">\r\n        <h2>Employees birthday​</h2>\r\n      </div>\r\n      <div className=\"wrapper-dob\">\r\n        {isSelect ? (\r\n          table\r\n        ) : (\r\n          <p>\r\n            <span className=\"dob-title\">No selected employees</span>\r\n          </p>\r\n        )}\r\n      </div>\r\n    </section>\r\n  );\r\n};\r\n","import \"./Employees.css\";\r\nimport { EmployeesPart } from \"./EmployeesPart\";\r\nimport { BirthdayPart } from \"./BirthdayPart\";\r\n\r\nexport const Employees = () => {\r\n  return (\r\n    <section>\r\n      <div className=\"wrapper\">\r\n        <EmployeesPart />\r\n        <BirthdayPart />\r\n      </div>\r\n    </section>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\n\r\nimport { Employees } from \"./features/employees/Employees\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Employees />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport throttle from \"lodash.throttle\";\r\nimport employeesReducer from \"../features/employees/employeesSlice\";\r\nimport { saveState } from \"./sessionStorage\";\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    employees: employeesReducer,\r\n  },\r\n});\r\n\r\nstore.subscribe(\r\n  throttle(() => {\r\n    saveState({\r\n      employees: store.getState().employees,\r\n    });\r\n  }, 1000)\r\n);\r\n\r\nexport default store;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === \"localhost\" ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === \"[::1]\" ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener(\"load\", () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            \"This web app is being served cache-first by a service \" +\r\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === \"installed\") {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                \"New content is available and will be used when all \" +\r\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log(\"Content is cached for offline use.\");\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error(\"Error during service worker registration:\", error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { \"Service-Worker\": \"script\" },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get(\"content-type\");\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        \"No internet connection found. App is running in offline mode.\"\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if (\"serviceWorker\" in navigator) {\r\n    navigator.serviceWorker.ready.then((registration) => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport store from \"./app/store\";\r\nimport { Provider } from \"react-redux\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}